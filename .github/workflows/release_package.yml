name: Test and Build

on:
  pull_request:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          registry-url: https://registry.npmjs.org/
          node-version: '20'

      - name: Install dependencies
        run: npm install
      
      - name: Test
        run: |
          RUN=CI npx nx run-many --target=test --all --parallel 5
          npx nx run-many --target=lint --all
          npx nx run-many --target=build --all --prod

      - name: Build components
        run: |
          npx nx affected:build --prod --with-deps --base=main

      - name: Raise version of affected libraries
        run: |
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n 1)
          LIBS=$(npx nx affected:libs --base=$LATEST_TAG --head=HEAD --plain | awk 'NR > 2 && $1 != "Done" { print $1 }')
          for LIBRARY in $LIBS
          do
            cd ./libs/$LIBRARY
            npm version minor --no-git-tag-version --no-push
            echo "Bumping $LIBRARY"
            cd ..
            cd ..
          done
          npm version minor --no-git-tag-version --no-push

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: Push changes
        run: |
          git fetch
          git config user.email "pranavkaushik@gmail.com"
          git config user.name "Pranav Kaushik"
          git add --all
          git commit -m "update versions to ${{ steps.package-version.outputs.current-version }}"
          git push

      - name: Tag release
        run: |
          git tag -a v${{ steps.package-version.outputs.current-version }} -m "tag release v${{ steps.package-version.outputs.current-version }}"
          git push --follow-tags

      - name: Git configuration
        run: |
          git config --global user.email "pranavkaushik@gmail.com"
          git config --global user.name "Pranav Kaushik"

      - name: Bump release version
        if: startsWith(github.event.inputs.release-type, 'pre') != true
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=latest" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      - name: Bump pre-release version
        if: startsWith(github.event.inputs.release-type, 'pre')
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version --preid=beta version $RELEASE_TYPE
          echo "RELEASE_TAG=beta" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      - name: Update changelog
        uses: superfaceai/release-changelog-action@v1
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: release

      - name: Commit CHANGELOG.md and package.json changes and create tag
        run: |
          git add "package.json"
          git add "CHANGELOG.md"
          git commit -m "chore: release ${{ env.NEW_VERSION }}"
          git tag ${{ env.NEW_VERSION }}

      - name: Publish
        run: cd ./dist/libs/apollo-client-reactive-store && npm publish --verbose --access public --tag ${{ env.RELEASE_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}

      - name: Push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin && git push --tags

      - id: get-changelog
        name: Get version changelog
        uses: superfaceai/release-changelog-action@v1
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: read

      - name: Update GitHub release documentation
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          body: ${{ steps.get-changelog.outputs.changelog }}
          prerelease: ${{ startsWith(github.event.inputs.release-type, 'pre') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
